pipeline{
    agent any
    tools{
        jdk 'JAVA_HOME'
        maven 'M2_HOME'
    }
      environment {
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUS_URL = "192.168.33.10:8081"
        NEXUS_REPOSITORY = "jenkinss"
        NEXUS_CREDENTIAL_ID = "nexuss"
    }
    stages{
        stage('git clone'){
            steps{
                git branch: 'AnisNoussari_5sae6_grp4', url: 'https://github.com/waeltb/5SAE6-G4-Kaddem.git'
                sh 'mvn clean compile'
            }

        }
         stage("Maven Build") {
            steps {
                script {
                    sh "mvn install"
                }
            }
        }
        stage("sonar"){
             steps {

                sh 'mvn sonar:sonar -Dsonar.login=admin -Dsonar.password=anis -Dsonar.token=sonar '
            }
        }

         stage('test unit/mockito'){
            steps{
                sh 'mvn test '
            }

        }
         stage("add artifact to Nexus Repository ") {
            steps {
                script {
                    pom = readMavenPom file: "pom.xml";
                    filesByGlob = findFiles(glob: "target/*.${pom.packaging}");
                    echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                    artifactPath = filesByGlob[0].path;
                    artifactExists = fileExists artifactPath;
                    if(artifactExists) {
                        echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";
                        nexusArtifactUploader(
                            nexusVersion: NEXUS_VERSION,
                            protocol: NEXUS_PROTOCOL,
                            nexusUrl: NEXUS_URL,
                            groupId: "pom.tn.esprit.spring",
                            version: "pom.0.0.1-SNAPSHOT",
                            repository: NEXUS_REPOSITORY,
                            credentialsId: NEXUS_CREDENTIAL_ID,
                            artifacts: [
                                [artifactId: "pom.kaddem",
                                classifier: '',
                                file: artifactPath,
                                type: pom.packaging],
                                [artifactId: "pom.kaddem",
                                classifier: '',
                                file: "pom.xml",
                                type: "pom"]
                            ]
                        );
                    } else {
                        error "*** File: ${artifactPath}, could not be found";
                    }
                }
                sh ' docker stop mysql '
            }
        }
         stage('build image docker'){
            steps{
                sh 'docker build -t anis10/kaddem-0.0.1-snapshot .'
            }
        }
         stage('push to docker hub'){
            steps{
                script{
                    withCredentials([string(credentialsId: 'pwd', variable: 'dockerpwd')]) {
                     sh 'docker login -u anis10 -p ${dockerpwd}'

}
                     sh 'docker push anis10/kaddem-0.0.1-snapshot'
                }
            }
        }
          stage('Docker Compose') {
            steps {
                script {

                   sh 'docker compose up -d'
              }
            }
          }
          stage('grafana'){
            steps{
                echo 'wait 10 second !'
                sleep 10

            }

        }
          stage('send mail'){
            steps{
         mail bcc: '', body: 'build pipeline jenkins success ', cc: '', from: '', replyTo: '', subject: 'projet devops', to: 'anis.noussari@esprit.tn'

            }

        }


    }
}
